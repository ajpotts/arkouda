[build-system]
requires = ["setuptools>=64", "wheel", "versioneer[toml]>=0.22"]
build-backend = "setuptools.build_meta"

[project]
name = "arkouda"
dynamic = ["version"]                # <-- Versioneer will supply this
description = "Parallel, distributed NumPy-like arrays backed by Chapel"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [{ name = "U.S. Government" }]
keywords = ["HPC","workflow","exploratory","analysis","parallel","distribute","arrays","Chapel"]

# keep your dependencies/optional-dependencies blocks here;
# importantly: DO NOT list "versioneer" as a runtime dependency


dependencies = [
  "numpy>=2.0",
  "pandas>=1.4.0,!=2.2.0",
  "pyzmq>=20.0.0",
  "typeguard==2.10.0",
  "tabulate",
  "pyfiglet",
  "matplotlib>=3.3.2",
  "h5py>=3.7.0",
  "types-tabulate",
  "tables>=3.10.0",
  "pyarrow<21.0.0,>=6.0.1",
  "scipy",
  "cloudpickle",
]

[project.optional-dependencies]
dev = [
  "pexpect",
  "pytest>=6.0",
  "pytest-env",
  "pytest-timeout",
  "pytest-html",
  "pytest-benchmark",
  "pytest-json-report",
  "pytest-subtests",
  "Sphinx>=5.1.1",
  "sphinx-argparse",
  "sphinx-autoapi",
  "mypy>=0.931",
  "black==25.1.0",
  "ruff==0.11.2",
  "isort==5.13.2",
  "flake8",
  "furo",
  "myst-parser",
  "linkify-it-py",
  "mathjax",
  "sphinx-autopackagesummary",
  "sphinx-design",
  "sphinx-autodoc-typehints",
  "pandas-stubs",
  "types-python-dateutil",
  "ipython",
  "pydocstyle>=6.3.0",
  "pre-commit",
  "darglint>=1.8.1",
  "pydoclint[flake8]==0.6.10",
  "numba",
  "pytest-cov",
  "coverage[toml]",
]


[project.urls]
Homepage = "https://github.com/Bears-R-Us/arkouda"
"Bug Reports" = "https://github.com/Bears-R-Us/arkouda/issues"
Source = "https://github.com/Bears-R-Us/arkouda"
Chapel = "https://chapel-lang.org"

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE*", "COPYING*", "NOTICE*", "AUTHORS*"]

[tool.setuptools.packages.find]
where = ["."]

# Versioneer 0.22+ reads config from TOML:
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "arkouda/_version.py"
versionfile_build  = "arkouda/_version.py"
tag_prefix = "v"                     # "" if your tags look like v1.2.3 or 1.2.3; set "v" if needed
parentdir_prefix = "arkouda-"


[tool.isort]
profile = "black"
line_length = 105
known_first_party = ["arkouda"]

force_sort_within_sections = true
lines_after_imports = 2
#force_single_line = true
lines_between_types = 1

# Prefer stable one-per-line *only when there are several names*
multi_line_output = 3            # vertical hanging indent
#use_parentheses = true
#include_trailing_comma = true
#force_grid_wrap = 0     #   Force wrapping at N imports, N=0 means do not force

# Keep these always on a single line
single_line_exclusions = [
  "__future__",
  "typing",
  "typing_extensions",
]

skip = [
  "build",
  ".bzr",
  "node_modules",
  "buck-out",
  ".pytype",
  "__pypackages__",
  ".svn",
  ".tox",
  ".mypy_cache",
  ".git",
  ".hg",
  ".direnv",
  ".pants.d",
  ".venv",
  ".nox",
  "dist",
  ".eggs",
  "venv",
  "_build",
  "runs",
  "toys",
  "versioneer.py",
]
extend_skip_glob = [
  ".venv/*",
  "*.pyi",
  "dep/*",
  "*__init__.py",
  "*deprecated*",
  "arkouda/versioneer.py",
  "arkouda/toys/*",
  "arkouda/benchmark_v2/*",
  "arkouda/server_util/test/*",
]
    
[tool.pydocstyle]
convention = "numpy"
match-dir = "arkouda"

[tool.coverage.run]
branch = true
source = ["arkouda"]
omit = [
  "tests/*",
  "**/__main__.py",
  "**/version.py",
  "arkouda/_version.py",
#   Remove these when the coverage is improved:
  "arkouda/accessor.py",
  "arkouda/alignment.py",
  "arkouda/apply.py",
  "arkouda/array_api/_dtypes.py",
  "arkouda/array_api/array_object.py",
  "arkouda/array_api/creation_functions.py",
  "arkouda/array_api/data_type_functions.py",
  "arkouda/array_api/elementwise_functions.py",
  "arkouda/array_api/indexing_functions.py",
  "arkouda/array_api/linalg.py",
  "arkouda/array_api/manipulation_functions.py",
  "arkouda/array_api/searching_functions.py",
  "arkouda/array_api/sorting_functions.py",
  "arkouda/array_api/statistical_functions.py",
  "arkouda/array_api/utility_functions.py",
  "arkouda/client.py",
  "arkouda/client_dtypes.py",
  "arkouda/comm_diagnostics.py",
  "arkouda/history.py",
  "arkouda/infoclass.py",
  "arkouda/logger.py",
  "arkouda/message.py",
  "arkouda/numpy/char.py",
  "arkouda/numpy/dtypes.py",
  "arkouda/numpy/err.py",
  "arkouda/numpy/manipulation_functions.py",
  "arkouda/numpy/numeric.py",
  "arkouda/numpy/pdarrayclass.py",
  "arkouda/numpy/pdarraycreation.py",
  "arkouda/numpy/pdarraymanipulation.py",
  "arkouda/numpy/pdarraysetops.py",
  "arkouda/numpy/random/generator.py",
  "arkouda/numpy/random/legacy.py",
  "arkouda/numpy/segarray.py",
  "arkouda/numpy/sorting.py",
  "arkouda/numpy/strings.py",
  "arkouda/numpy/timeclass.py",
  "arkouda/numpy/util.py",
  "arkouda/numpy/utils.py",
  "arkouda/pandas/categorical.py",
  "arkouda/pandas/dataframe.py",
  "arkouda/pandas/extension/_arkouda_array.py",
  "arkouda/pandas/extension/_arkouda_categorical_array.py",
  "arkouda/pandas/extension/_arkouda_extension_array.py",
  "arkouda/pandas/extension/_arkouda_string_array.py",
  "arkouda/pandas/groupbyclass.py",
  "arkouda/pandas/index.py",
  "arkouda/pandas/io.py",
  "arkouda/pandas/io_util.py",
  "arkouda/pandas/join.py",
  "arkouda/pandas/match.py",
  "arkouda/pandas/matcher.py",
  "arkouda/pandas/row.py",
  "arkouda/pandas/series.py",
  "arkouda/plotting.py",
  "arkouda/scipy/_stats_py.py",
  "arkouda/scipy/sparrayclass.py",
  "arkouda/scipy/sparsematrix.py",
  "arkouda/scipy/special/_math.py",
  "arkouda/security.py",
  "arkouda/testing/_asserters.py",
  "arkouda/testing/_equivalence_asserters.py",
  "server_util/test/server_test_util.py",
  "tests/apply_test.py",
  "tests/array_api/utility_functions.py",
  "tests/check.py",
  "tests/checkpoint_test.py",
  "tests/client_test.py",
  "tests/coargsort_test.py",
  "tests/comm_diagnostics_test.py",
  "tests/conftest.py",
  "tests/extrema_test.py",
  "tests/indexing_test.py",
  "tests/numpy/datetime_test.py",
  "tests/numpy/err_test.py",
  "tests/numpy/numeric_test.py",
  "tests/numpy/pdarray_creation_test.py",
  "tests/numpy/pdarrayclass_test.py",
  "tests/numpy/random_test.py",
  "tests/numpy/segarray_test.py",
  "tests/numpy/setops_test.py",
  "tests/numpy/sort_test.py",
  "tests/numpy/string_test.py",
  "tests/operator_test.py",
  "tests/pandas/categorical_test.py",
  "tests/pandas/dataframe_test.py",
  "tests/pandas/extension/arkouda_categorical_extension.py",
  "tests/pandas/groupby_test.py",
  "tests/pandas/io_test.py",
  "tests/pandas/parquet_edge_test.py",
  "tests/scipy/scipy_test.py",
  "tests/stats_test.py",
  "tests/test_no_ak_connect_doctest.py",
  "tests/testing/asserters_test.py",
  "arkouda/join/__init__.py",
  "arkouda/match/__init__.py",
  "arkouda/matcher/__init__.py",
  "arkouda/numpy/lib/npyio/__init__.py",
  "arkouda/pdarraymanipulation/__init__.py",
  "arkouda/pdarraysetops/__init__.py",
  "arkouda/random/__init__.py",
  "arkouda/scipy/stats/__init__.py",
  "arkouda/sparrayclass/__init__.py",
  "arkouda/sparsematrix/__init__.py",
  "arkouda/timeclass/__init__.py"
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100                  # gate the build at X%

[tool.pytest.ini_options]
addopts = "-q --maxfail=1"


